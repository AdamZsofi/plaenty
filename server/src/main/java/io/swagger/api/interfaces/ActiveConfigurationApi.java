/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api.interfaces;

import io.swagger.model.generated.ModelConfiguration;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-11-17T15:48:40.301Z[GMT]")
@Validated
public interface ActiveConfigurationApi {

    @Operation(summary = "Returns the active configuration", description = "Return all the configuration information of the active configuration", tags={ "configuration" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The active configuration of the system", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelConfiguration.class))),
        
        @ApiResponse(responseCode = "404", description = "Not found: No active configuration in system") })
    @RequestMapping(value = "/active-configuration",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ModelConfiguration> activeConfiguration();


    @Operation(summary = "Updates the current configuration based on the given id", description = "", security = {
        @SecurityRequirement(name = "oAuthSecurity", scopes = {
                    })    }, tags={ "configuration" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The (updated) active configuration of the system", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelConfiguration.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal error: server could not set active configuration") })
    @RequestMapping(value = "/active-configuration/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ModelConfiguration> activeConfigurationIdPut(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id);

}

