/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ModelConfiguration;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-11-17T15:48:40.301Z[GMT]")
@Validated
public interface ConfigurationApi {

    @Operation(summary = "Returns the details of the configuration with the given id", description = "Return all the configuration information of the configuration with the given id", tags={ "configuration" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The active configuration of the system", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelConfiguration.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Configuration not found") })
    @RequestMapping(value = "/configuration/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ModelConfiguration> configurationIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Update existing configurations", description = "", security = {
        @SecurityRequirement(name = "oAuthSecurity", scopes = {
                    })    }, tags={ "configuration" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelConfiguration.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal error: Could not update configuration") })
    @RequestMapping(value = "/configuration/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ModelConfiguration> configurationIdPut(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Returns a list of all the configurations", description = "Returns a list of all the configurations", tags={ "configuration" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The active configuration of the system", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelConfiguration.class))) })
    @RequestMapping(value = "/configuration/list",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ModelConfiguration> configurationListGet();


    @Operation(summary = "Add a new configuration", description = "Adds a new configuration and returns the newly added configuration in the response", security = {
        @SecurityRequirement(name = "oAuthSecurity", scopes = {
                    })    }, tags={ "configuration" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok"),
        
        @ApiResponse(responseCode = "500", description = "Internal error: Could not add configuration") })
    @RequestMapping(value = "/configuration",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> configurationPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ModelConfiguration body);

}

